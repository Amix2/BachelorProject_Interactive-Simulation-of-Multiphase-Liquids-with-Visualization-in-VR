#include "EmiterVRActionController.h"
enum class RespectOffset {
	NONE, ONLY_ANGLE, ALL
};

RespectOffset m_respectOffset = RespectOffset::NONE;

void EmiterVRActionController::triggerButton(vr::InputDigitalActionData_t event) const
{
<<<<<<< Updated upstream
	//
=======
	if(event.bActive and event.bChanged)
		m_respectOffset = RespectOffset( ((int)m_respectOffset+1) % 3);
>>>>>>> Stashed changes
}

void EmiterVRActionController::gripButton(vr::InputDigitalActionData_t event) const
{
	this->m_emiter->m_updateMatrix = event.bState;
}

void EmiterVRActionController::menuButton(vr::InputDigitalActionData_t event) const
{
}

<<<<<<< Updated upstream
void EmiterVRActionController::touchpad(vr::InputAnalogActionData_t event) const
{
	if (event.deltaX < 0)
	{
		this->m_emiter->decreaseVelocity(-10 * event.deltaX);
	}
	else
	{
		this->m_emiter->increaseVelocity(10 * event.deltaX);
	}
	if (event.deltaY < 0)
	{
		this->m_emiter->decreaseSize(-10 * event.deltaY);
	}
	else
	{
		this->m_emiter->increaseSize(10 * event.deltaY);
	}
=======
void EmiterVRActionController::touchpadMovement(const glm::vec2& position, const glm::vec2& move) const
{

	//if (abs(move.x) > abs(move.y)) {
	//	// move in X axis
	//	if (move.x > 0) {
	//		m_emiter->
	//	}
	//}
>>>>>>> Stashed changes
}

void EmiterVRActionController::handMovement(const glm::mat4& positionMatrix, const glm::mat4& grabOffset) const
{
	switch(m_respectOffset) {
	case RespectOffset::NONE:
		m_emiter->updateMatrix(positionMatrix);
		break;
	case RespectOffset::ONLY_ANGLE:
		glm::mat4 offset = grabOffset;
		Utils::setPosition(&offset, { 0,0,0 });
		m_emiter->updateMatrix(positionMatrix * offset);
		break;
	case RespectOffset::ALL:
		m_emiter->updateMatrix(positionMatrix * grabOffset);
		break;

	}
}
